package com.rideconnect

import android.os.Bundle
import android.widget.Toast
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.unit.dp
import com.mapbox.navigation.base.ExperimentalPreviewMapboxNavigationAPI
import com.rideconnect.presentation.components.navigation.NavigationComponent

@OptIn(ExperimentalPreviewMapboxNavigationAPI::class, ExperimentalMaterial3Api::class)
class MainActivity : ComponentActivity() {

    // Định nghĩa các địa điểm mẫu với tọa độ
    private val sampleLocations = mapOf(
        "Đại học Bách Khoa Hà Nội" to Pair(21.005729, 105.845335),
        "Nhà hát Lớn Hà Nội" to Pair(21.024560, 105.857058),
        "Bệnh viện Bạch Mai" to Pair(21.002138, 105.841430),
        "Times City" to Pair(20.994473, 105.868671),
        "Sân bay Nội Bài" to Pair(21.218225, 105.804600),
        "Công viên Thủ Lệ" to Pair(21.031851, 105.809220),
        "Trung tâm Hội nghị Quốc gia" to Pair(21.004755, 105.787020),
        "Bến xe Mỹ Đình" to Pair(21.028825, 105.773938)
    )

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            MaterialTheme {
                MainScreen()
            }
        }
    }

    @OptIn(ExperimentalMaterial3Api::class)
    @Composable
    fun MainScreen() {
        var showNavigation by remember { mutableStateOf(false) }
        var startAddress by remember { mutableStateOf("") }
        var destinationAddress by remember { mutableStateOf("") }
        var startCoordinates by remember { mutableStateOf<Pair<Double, Double>?>(null) }
        var destinationCoordinates by remember { mutableStateOf<Pair<Double, Double>?>(null) }
        var expandedStart by remember { mutableStateOf(false) }
        var expandedDest by remember { mutableStateOf(false) }

        val context = LocalContext.current

        Surface(
            modifier = Modifier.fillMaxSize(),
            color = MaterialTheme.colorScheme.background
        ) {
            if (showNavigation && startCoordinates != null && destinationCoordinates != null) {
                Box(modifier = Modifier.fillMaxSize()) {
                    NavigationComponent(
                        originLatitude = startCoordinates!!.first,
                        originLongitude = startCoordinates!!.second,
                        destinationLatitude = destinationCoordinates!!.first,
                        destinationLongitude = destinationCoordinates!!.second
                    )

                    FilledTonalButton(
                        onClick = {
                            showNavigation = false
                            startCoordinates = null
                            destinationCoordinates = null
                        },
                        modifier = Modifier
                            .align(Alignment.TopStart)
                            .padding(16.dp)
                    ) {
                        Text("Quay lại")
                    }
                }
            } else {
                Column(
                    modifier = Modifier
                        .fillMaxSize()
                        .padding(16.dp),
                    horizontalAlignment = Alignment.CenterHorizontally
                ) {
                    Spacer(modifier = Modifier.height(32.dp))

                    Text(
                        text = "Ứng dụng Chỉ đường cho Tài xế",
                        style = MaterialTheme.typography.headlineMedium
                    )

                    Spacer(modifier = Modifier.height(32.dp))

                    // Điểm xuất phát
                    ExposedDropdownMenuBox(
                        expanded = expandedStart,
                        onExpandedChange = { expandedStart = it },
                        modifier = Modifier.fillMaxWidth()
                    ) {
                        OutlinedTextField(
                            value = startAddress,
                            onValueChange = {},
                            readOnly = true,
                            trailingIcon = { ExposedDropdownMenuDefaults.TrailingIcon(expanded = expandedStart) },
                            modifier = Modifier
                                .menuAnchor()
                                .fillMaxWidth(),
                            label = { Text("Điểm xuất phát") },
                            colors = ExposedDropdownMenuDefaults.outlinedTextFieldColors()
                        )

                        ExposedDropdownMenu(
                            expanded = expandedStart,
                            onDismissRequest = { expandedStart = false }
                        ) {
                            sampleLocations.forEach { (name, coordinates) ->
                                DropdownMenuItem(
                                    text = { Text(name) },
                                    onClick = {
                                        startAddress = name
                                        startCoordinates = coordinates
                                        expandedStart = false
                                    }
                                )
                            }
                        }
                    }

                    Spacer(modifier = Modifier.height(16.dp))

                    // Điểm đến
                    ExposedDropdownMenuBox(
                        expanded = expandedDest,
                        onExpandedChange = { expandedDest = it },
                        modifier = Modifier.fillMaxWidth()
                    ) {
                        OutlinedTextField(
                            value = destinationAddress,
                            onValueChange = {},
                            readOnly = true,
                            trailingIcon = { ExposedDropdownMenuDefaults.TrailingIcon(expanded = expandedDest) },
                            modifier = Modifier
                                .menuAnchor()
                                .fillMaxWidth(),
                            label = { Text("Điểm đến") },
                            colors = ExposedDropdownMenuDefaults.outlinedTextFieldColors()
                        )

                        ExposedDropdownMenu(
                            expanded = expandedDest,
                            onDismissRequest = { expandedDest = false }
                        ) {
                            sampleLocations.forEach { (name, coordinates) ->
                                DropdownMenuItem(
                                    text = { Text(name) },
                                    onClick = {
                                        destinationAddress = name
                                        destinationCoordinates = coordinates
                                        expandedDest = false
                                    }
                                )
                            }
                        }
                    }

                    Spacer(modifier = Modifier.height(24.dp))

                    FilledTonalButton(
                        onClick = {
                            if (startCoordinates != null && destinationCoordinates != null) {
                                showNavigation = true
                            } else {
                                Toast.makeText(
                                    context,
                                    "Vui lòng chọn điểm xuất phát và điểm đến",
                                    Toast.LENGTH_SHORT
                                ).show()
                            }
                        },
                        enabled = startAddress.isNotEmpty() && destinationAddress.isNotEmpty(),
                        modifier = Modifier.fillMaxWidth()
                    ) {
                        Text("Bắt đầu chỉ đường")
                    }
                }
            }
        }
    }
}